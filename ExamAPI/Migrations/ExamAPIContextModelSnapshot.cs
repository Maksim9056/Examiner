// <auto-generated />
using System;
using ExamAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExamAPI.Migrations
{
    [DbContext(typeof(ExamAPIContext))]
    partial class ExamAPIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExamModels.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerOptions")
                        .HasColumnType("text");

                    b.Property<bool>("CorrectAnswers")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("ExamModels.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data_of_Exam")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExamsId")
                        .HasColumnType("integer");

                    b.Property<int>("Grade_Exam")
                        .HasColumnType("integer");

                    b.Property<string>("Name_Exam")
                        .HasColumnType("text");

                    b.Property<int?>("QuesttionId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.HasIndex("QuesttionId");

                    b.HasIndex("UserId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("ExamModels.Exams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_exam")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamModels.ExamsTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamsId")
                        .HasColumnType("integer");

                    b.Property<int?>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.HasIndex("TestId");

                    b.ToTable("ExamsTest");
                });

            modelBuilder.Entity("ExamModels.Filles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Name")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("Filles");
                });

            modelBuilder.Entity("ExamModels.Options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Id_AnswerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Id_TestId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int?>("Questions_IdId")
                        .HasColumnType("integer");

                    b.Property<string>("Test_Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id_AnswerId");

                    b.HasIndex("Id_TestId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("Questions_IdId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ExamModels.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<string>("CorrectAnswers")
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionsId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("ExamModels.Questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerTrue")
                        .HasColumnType("text");

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamModels.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_roles")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ExamModels.Save_results", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Date_of_Result_Exam_Endings")
                        .HasColumnType("text");

                    b.Property<int?>("Exam_idId")
                        .HasColumnType("integer");

                    b.Property<int?>("Name_TestId")
                        .HasColumnType("integer");

                    b.Property<string>("Name_Users")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("Resukts_exam")
                        .HasColumnType("integer");

                    b.Property<int?>("User_idId")
                        .HasColumnType("integer");

                    b.Property<string>("Users_Answers_Questions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Exam_idId");

                    b.HasIndex("Name_TestId");

                    b.HasIndex("QuestionsId");

                    b.HasIndex("User_idId");

                    b.ToTable("Save_results");
                });

            modelBuilder.Entity("ExamModels.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name_Test")
                        .HasColumnType("text");

                    b.Property<int>("Options_Id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("ExamModels.TestQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdQuestionsId")
                        .HasColumnType("integer");

                    b.Property<int?>("IdTestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdQuestionsId");

                    b.HasIndex("IdTestId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("ExamModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataMess")
                        .HasColumnType("text");

                    b.Property<int?>("EmailId")
                        .HasColumnType("integer");

                    b.Property<string>("Employee_Mail")
                        .HasColumnType("text");

                    b.Property<int>("Id_roles_users")
                        .HasColumnType("integer");

                    b.Property<string>("Name_Employee")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ExamModels.UserExams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamsId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamsId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExams");
                });

            modelBuilder.Entity("ExamModels.User_roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Id_rolesId")
                        .HasColumnType("integer");

                    b.Property<int?>("User_idId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id_rolesId");

                    b.HasIndex("User_idId");

                    b.ToTable("User_roles");
                });

            modelBuilder.Entity("ExamModels.Exam", b =>
                {
                    b.HasOne("ExamModels.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamsId");

                    b.HasOne("ExamModels.Questions", "Questtion")
                        .WithMany()
                        .HasForeignKey("QuesttionId");

                    b.HasOne("ExamModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Exams");

                    b.Navigation("Questtion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamModels.ExamsTest", b =>
                {
                    b.HasOne("ExamModels.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamsId");

                    b.HasOne("ExamModels.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId");

                    b.Navigation("Exams");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ExamModels.Options", b =>
                {
                    b.HasOne("ExamModels.Answer", "Id_Answer")
                        .WithMany()
                        .HasForeignKey("Id_AnswerId");

                    b.HasOne("ExamModels.Test", "Id_Test")
                        .WithMany()
                        .HasForeignKey("Id_TestId");

                    b.HasOne("ExamModels.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("ExamModels.Questions", "Questions_Id")
                        .WithMany()
                        .HasForeignKey("Questions_IdId");

                    b.Navigation("Id_Answer");

                    b.Navigation("Id_Test");

                    b.Navigation("Questions");

                    b.Navigation("Questions_Id");
                });

            modelBuilder.Entity("ExamModels.QuestionAnswer", b =>
                {
                    b.HasOne("ExamModels.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("ExamModels.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.Navigation("Answer");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExamModels.Save_results", b =>
                {
                    b.HasOne("ExamModels.Exams", "Exam_id")
                        .WithMany()
                        .HasForeignKey("Exam_idId");

                    b.HasOne("ExamModels.Test", "Name_Test")
                        .WithMany()
                        .HasForeignKey("Name_TestId");

                    b.HasOne("ExamModels.Questions", "Questions")
                        .WithMany()
                        .HasForeignKey("QuestionsId");

                    b.HasOne("ExamModels.User", "User_id")
                        .WithMany()
                        .HasForeignKey("User_idId");

                    b.Navigation("Exam_id");

                    b.Navigation("Name_Test");

                    b.Navigation("Questions");

                    b.Navigation("User_id");
                });

            modelBuilder.Entity("ExamModels.TestQuestion", b =>
                {
                    b.HasOne("ExamModels.Questions", "IdQuestions")
                        .WithMany()
                        .HasForeignKey("IdQuestionsId");

                    b.HasOne("ExamModels.Test", "IdTest")
                        .WithMany()
                        .HasForeignKey("IdTestId");

                    b.Navigation("IdQuestions");

                    b.Navigation("IdTest");
                });

            modelBuilder.Entity("ExamModels.User", b =>
                {
                    b.HasOne("ExamModels.Filles", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.Navigation("Email");
                });

            modelBuilder.Entity("ExamModels.UserExams", b =>
                {
                    b.HasOne("ExamModels.Exams", "Exams")
                        .WithMany()
                        .HasForeignKey("ExamsId");

                    b.HasOne("ExamModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Exams");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamModels.User_roles", b =>
                {
                    b.HasOne("ExamModels.Roles", "Id_roles")
                        .WithMany()
                        .HasForeignKey("Id_rolesId");

                    b.HasOne("ExamModels.User", "User_id")
                        .WithMany()
                        .HasForeignKey("User_idId");

                    b.Navigation("Id_roles");

                    b.Navigation("User_id");
                });
#pragma warning restore 612, 618
        }
    }
}
